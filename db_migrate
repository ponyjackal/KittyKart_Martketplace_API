#!/usr/bin/env node
const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path');
const { argv } = require('process');

const getAllFiles = (dirPath, filesList = []) => {
  const files = fs.readdirSync(dirPath)

  files.forEach((file) => {
    if (fs.statSync(path.join(dirPath, file)).isDirectory()) {
      filesList = (getAllFiles(path.join(dirPath, file), filesList))
    } else {
      filesList.push(path.join(dirPath, file))
    }
  })

  return filesList
}

const extractDbNameUrl = (file) => {
  const db = {
    name: '',
    envVar: '',
  }
  const content = fs.readFileSync(file).toString()
  content.split(/\r?\n/).forEach((line) => {
    if (line.match(/^\s+output\s+=/)) {
      db.name = line.split('/').reverse()[0].replace('"', '')
    }
    if (line.match(/^\s+url\s+=/)) {
      db.envVar = line
        .split('')
        .filter((x) => x.match(/[A-Z_]/))
        .join('')
    }
  })
  return db
}

// works for local development
const defaultDbBaseUri = () => {
  if (fs.existsSync("/vault/secrets/env")) {
    console.log('Found /vault/secrets/env')
    const dotenv = require('dotenv')
    const { DB_BASE_URI } = dotenv.config({ path: '/vault/secrets/env' })
    console.log({ DB_BASE_URI })
    return DB_BASE_URI
  } else {
    try {
      const port = execSync(
        'docker port $(docker ps | grep -E "(testdb|database|postgres)" | awk \'{print $1}\') | cut -d: -f2'
        )
      const uri = 'postgres://postgres:postgres@localhost:'.concat(port)
      return uri.trim();
    } catch (err) {
      console.log(err.toString())
      return 'postgres://postgres:postgres@database:5432'
    }
  }
}

const migrateDatabases = migrationDir => {
  const dbBaseURI = process.env.DB_BASE_URI || defaultDbBaseUri()
  const schemaFiles = getAllFiles(migrationDir).filter((x) => path.basename(x) === 'schema.prisma')
  const databaseUris = schemaFiles.reduce((acc, schemaFile) => {
    const db = extractDbNameUrl(schemaFile)
    acc[db.envVar] = dbBaseURI.concat('/', db.name)
      return acc
  }, {})
  schemaFiles.forEach(file => {
    console.log('Executing: prisma migrate deploy --schema %s ...', file)
    execSync(`npx prisma migrate deploy --schema ${file}`, { env: { ...process.env, ...databaseUris  } })
  })
}

/* ************************************************************************* */
/*                                   MAIN                                    */
/* ************************************************************************* */
const args = process.argv;
let p = process.cwd();
if (argv.length > 2) {
  switch (args[2]) {
    case '--path':
      p = path.join(argv[3]);
      break;
    case '-p':
      p = path.join(argv[3]);
      break;
    default:
      console.log(`USAGE: ${path.basename(argv[1])} -p/--path /directory/to/migration/scripts (DEFAULT: ./)`)
  }
}
migrateDatabases(p);